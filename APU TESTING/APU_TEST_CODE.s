;
; File generated by cc65 v 2.19 - Git 51b946b
;
	.fopt		compiler,"cc65 v 2.19 - Git 51b946b"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_PALETTES
	.export		_IRAM
	.export		_OTHERRAM
	.export		_WRAM
	.export		___MAIN__

.segment	"DATA"

.segment	"IRAM": zeropage
.segment	"OTHERRAM": absolute
.segment	"WRAM": absolute
_IRAM:
	.res	8192,$00
_OTHERRAM:
	.res	16384,$00
_WRAM:
	.res	8192,$00

.segment	"RODATA"

_PALETTES:
	.byte	$30
	.byte	$3D
	.byte	$2D
	.byte	$1D
	.byte	$31
	.byte	$21
	.byte	$11
	.byte	$01
	.byte	$36
	.byte	$26
	.byte	$16
	.byte	$06
	.byte	$3A
	.byte	$2A
	.byte	$1A
	.byte	$0A

.segment	"BSS"

_TEST:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ __MAIN__ (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	___MAIN__: near

.segment	"CODE"

;
; IRAM[0x26] = 0x01;
;
	lda     #$01
	sta     _IRAM+38
;
; IRAM[0x25] = 0x02;
;
	lda     #$02
	sta     _IRAM+37
;
; BYTE1 = 0x21;
;
	lda     #$21
	sta     $0001
;
; BYTE2 = 0x1E;
;
	lda     #$1E
	sta     $0002
;
; for (BYTE0 = 0x0; BYTE0 < 0x10; ++BYTE0) {
;
	lda     #$00
	sta     $0000
L0011:	lda     $0000
	cmp     #$10
L0015:	bcs     L0015
;
; ++BYTE1;
;
	inc     $0001
;
; ++BYTE2;
;
	inc     $0002
;
; if (IRAM[BYTE1] == 0x01 || IRAM[BYTE2] == 0x01) {
;
	ldy     $0001
	lda     _IRAM,y
	cmp     #$01
	beq     L0013
	ldy     $0002
	lda     _IRAM,y
	cmp     #$01
	bne     L0014
;
; if (IRAM[BYTE0] == 0x2) {
;
L0013:	ldy     $0000
	lda     _IRAM,y
	cmp     #$02
	bne     L0014
;
; IRAM[0x30] = 0xFF;
;
	lda     #$FF
	sta     _IRAM+48
;
; for (BYTE0 = 0x0; BYTE0 < 0x10; ++BYTE0) {
;
L0014:	inc     $0000
	jmp     L0011

.endproc

